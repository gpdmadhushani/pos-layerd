/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pos.layerd.view;

import java.awt.Color;
import static java.awt.Color.black;
import static java.awt.Color.green;
import static java.awt.Color.lightGray;
import static java.awt.Color.red;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.EtchedBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import pos.layerd.controller.CustomerController;
import pos.layerd.dto.CustomerDto;



/**
 *
 * @author TOSHIBA
 */
public class CustomerPanel extends javax.swing.JPanel {
    

   private CustomerController customerController;
   
   public CustomerPanel() {
        customerController =new CustomerController ();
        
        initComponents();
        
        loadAllCustomers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basepanel = new javax.swing.JPanel();
        headerpanel = new javax.swing.JPanel();
        headerlabel = new javax.swing.JLabel();
        homepanel = new javax.swing.JPanel();
        customerTitleLabel = new javax.swing.JLabel();
        customerIdLabel = new javax.swing.JLabel();
        custIdtext = new javax.swing.JTextField();
        customerNameLabel = new javax.swing.JLabel();
        custNametext = new javax.swing.JTextField();
        customerSalaryLabel = new javax.swing.JLabel();
        custSalarytext = new javax.swing.JTextField();
        customerAddressLabel = new javax.swing.JLabel();
        custAddresstext = new javax.swing.JTextField();
        customerPostalLabel = new javax.swing.JLabel();
        custCitytext = new javax.swing.JTextField();
        customerProvinceLabel = new javax.swing.JLabel();
        custProvincetext = new javax.swing.JTextField();
        customerCityLabel = new javax.swing.JLabel();
        custPostaltext = new javax.swing.JTextField();
        customerDOBLabel1 = new javax.swing.JLabel();
        tablepanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        deleteCustButton = new javax.swing.JButton();
        updateCustButton = new javax.swing.JButton();
        addCustButton = new javax.swing.JButton();
        comboxtitle = new javax.swing.JComboBox<>();
        custDOBtext = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(765, 579));

        basepanel.setPreferredSize(new java.awt.Dimension(765, 579));

        javax.swing.GroupLayout basepanelLayout = new javax.swing.GroupLayout(basepanel);
        basepanel.setLayout(basepanelLayout);
        basepanelLayout.setHorizontalGroup(
            basepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );
        basepanelLayout.setVerticalGroup(
            basepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );

        headerpanel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        headerpanel.setPreferredSize(new java.awt.Dimension(800, 500));

        headerlabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        headerlabel.setText("Manage Customer");
        headerlabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        homepanel.setPreferredSize(new java.awt.Dimension(800, 400));

        customerTitleLabel.setText("Customer Title");

        customerIdLabel.setText("Customer Id");

        custIdtext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custIdtext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                custIdtextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                custIdtextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                custIdtextMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                custIdtextMouseReleased(evt);
            }
        });
        custIdtext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custIdtextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custIdtextKeyReleased(evt);
            }
        });

        customerNameLabel.setText("Customer Name");

        custNametext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custNametext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                custNametextMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                custNametextMouseReleased(evt);
            }
        });
        custNametext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custNametextActionPerformed(evt);
            }
        });
        custNametext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custNametextKeyReleased(evt);
            }
        });

        customerSalaryLabel.setText("Salary");

        custSalarytext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custSalarytext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                custSalarytextMouseExited(evt);
            }
        });
        custSalarytext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                custSalarytextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custSalarytextKeyReleased(evt);
            }
        });

        customerAddressLabel.setText("Address");

        custAddresstext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custAddresstext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custAddresstextActionPerformed(evt);
            }
        });
        custAddresstext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custAddresstextKeyReleased(evt);
            }
        });

        customerPostalLabel.setText("Postal Code");

        custCitytext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custCitytext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custCitytextKeyReleased(evt);
            }
        });

        customerProvinceLabel.setText("Province");

        custProvincetext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custProvincetext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custProvincetextActionPerformed(evt);
            }
        });
        custProvincetext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custProvincetextKeyReleased(evt);
            }
        });

        customerCityLabel.setText("City");

        custPostaltext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custPostaltext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custPostaltextKeyReleased(evt);
            }
        });

        customerDOBLabel1.setText("Customer DOB");

        tablepanel.setPreferredSize(new java.awt.Dimension(400, 200));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 600));

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        customerTable.setPreferredSize(new java.awt.Dimension(900, 900));
        customerTable.setShowGrid(false);
        customerTable.setShowVerticalLines(true);
        customerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customerTable);

        javax.swing.GroupLayout tablepanelLayout = new javax.swing.GroupLayout(tablepanel);
        tablepanel.setLayout(tablepanelLayout);
        tablepanelLayout.setHorizontalGroup(
            tablepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablepanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        tablepanelLayout.setVerticalGroup(
            tablepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablepanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        deleteCustButton.setText("Delete Customer");
        deleteCustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustButtonActionPerformed(evt);
            }
        });

        updateCustButton.setText("Update Customer");
        updateCustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustButtonActionPerformed(evt);
            }
        });

        addCustButton.setText("Save Customer");
        addCustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustButtonActionPerformed(evt);
            }
        });

        comboxtitle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mr", "Mrs", "Miss" }));
        comboxtitle.setBorder(null);

        custDOBtext.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.lightGray));
        custDOBtext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                custDOBtextKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout homepanelLayout = new javax.swing.GroupLayout(homepanel);
        homepanel.setLayout(homepanelLayout);
        homepanelLayout.setHorizontalGroup(
            homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(homepanelLayout.createSequentialGroup()
                        .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(homepanelLayout.createSequentialGroup()
                                .addComponent(customerPostalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(custPostaltext, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(homepanelLayout.createSequentialGroup()
                                .addComponent(customerCityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(custCitytext, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(customerProvinceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(custProvincetext, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(homepanelLayout.createSequentialGroup()
                                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customerIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(custIdtext, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(homepanelLayout.createSequentialGroup()
                                        .addGap(152, 152, 152)
                                        .addComponent(customerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(custNametext, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(homepanelLayout.createSequentialGroup()
                                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerDOBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customerAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(custAddresstext, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(homepanelLayout.createSequentialGroup()
                                        .addComponent(custDOBtext, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(customerSalaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(custSalarytext, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(comboxtitle, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(homepanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteCustButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateCustButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addCustButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homepanelLayout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(tablepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        homepanelLayout.setVerticalGroup(
            homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homepanelLayout.createSequentialGroup()
                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homepanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(custIdtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(homepanelLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(customerTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(custNametext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboxtitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(9, 9, 9)
                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(custSalarytext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerSalaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerDOBLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(custDOBtext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(custAddresstext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(customerProvinceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(custProvincetext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(customerCityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(custCitytext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homepanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(customerPostalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homepanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homepanelLayout.createSequentialGroup()
                                .addComponent(custPostaltext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteCustButton)
                                .addComponent(updateCustButton)
                                .addComponent(addCustButton)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tablepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout headerpanelLayout = new javax.swing.GroupLayout(headerpanel);
        headerpanel.setLayout(headerpanelLayout);
        headerpanelLayout.setHorizontalGroup(
            headerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerpanelLayout.createSequentialGroup()
                .addGroup(headerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerpanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(headerlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(homepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        headerpanelLayout.setVerticalGroup(
            headerpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homepanel, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basepanel, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(basepanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(headerpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void custProvincetextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custProvincetextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custProvincetextActionPerformed

    private void deleteCustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustButtonActionPerformed
          deleteCustomer();
    }//GEN-LAST:event_deleteCustButtonActionPerformed

    private void updateCustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustButtonActionPerformed
          updateCustomer();
    }//GEN-LAST:event_updateCustButtonActionPerformed

    private void addCustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustButtonActionPerformed
       
        formValidate();
      
      
    }//GEN-LAST:event_addCustButtonActionPerformed

    private void custNametextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custNametextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custNametextActionPerformed

    private void custAddresstextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custAddresstextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custAddresstextActionPerformed

    private void customerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerTableMouseClicked
searchCustomer();
    }//GEN-LAST:event_customerTableMouseClicked

    private void custSalarytextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custSalarytextKeyPressed
        
    }//GEN-LAST:event_custSalarytextKeyPressed

    private void custNametextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custNametextMouseExited
    
    }//GEN-LAST:event_custNametextMouseExited
    
    
    
    private void custIdtextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custIdtextMouseExited

      
   
    }//GEN-LAST:event_custIdtextMouseExited

    private void custSalarytextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custSalarytextMouseExited
        
     
    }//GEN-LAST:event_custSalarytextMouseExited

    private void custIdtextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custIdtextMouseEntered
        
    }//GEN-LAST:event_custIdtextMouseEntered

    private void custIdtextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custIdtextMouseClicked
       
    }//GEN-LAST:event_custIdtextMouseClicked

    private void custIdtextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custIdtextMouseReleased
    
    }//GEN-LAST:event_custIdtextMouseReleased

    private void custNametextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custNametextMouseReleased
      
    }//GEN-LAST:event_custNametextMouseReleased

    private void custIdtextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custIdtextKeyPressed
         
                
    }//GEN-LAST:event_custIdtextKeyPressed
    
    
    private void custIdtextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custIdtextKeyReleased
     if(((LineBorder)custIdtext. getBorder()).getLineColor()==red &(custIdtext.getText().equals("")==false) ){
    custIdtext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custIdtext. getBorder()).getLineColor()==green  &(custIdtext.getText().equals("")==true)){
  
    custIdtext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if((custIdtext.getText().equals("")==false)){
           custIdtext.setBorder(BorderFactory. createLineBorder(Color. green));     
                
    } else{
            
        }            
        
        
        
        
        
    }//GEN-LAST:event_custIdtextKeyReleased

    private void custNametextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custNametextKeyReleased
        if(((LineBorder)custNametext. getBorder()).getLineColor()==red &(custNametext.getText().equals("")==false) ){
    custNametext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custNametext. getBorder()).getLineColor()==green  &(custNametext.getText().equals("")==true)){
  
   custNametext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(custNametext.getText().equals("")==false){
                
        custNametext.setBorder(BorderFactory. createLineBorder(Color. green));        
    }  else{
            
        }    
    }//GEN-LAST:event_custNametextKeyReleased

    private void custSalarytextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custSalarytextKeyReleased
       if(((LineBorder)custSalarytext. getBorder()).getLineColor()==red &(isDouble(custSalarytext.getText())==true) ){
    custSalarytext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custSalarytext. getBorder()).getLineColor()==green  &(isDouble(custSalarytext.getText())==false)){
  
  custSalarytext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(isDouble(custSalarytext.getText())==true){
         custSalarytext.setBorder(BorderFactory. createLineBorder(Color. green));       
                
    } else if(((LineBorder)custSalarytext. getBorder()).getLineColor()==red &(isDouble(custSalarytext.getText())==false)){
        custSalarytext.setBorder(BorderFactory. createLineBorder(Color. red)); 
    } else{
        
    }   
    }//GEN-LAST:event_custSalarytextKeyReleased

    private void custAddresstextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custAddresstextKeyReleased
        if(((LineBorder)custAddresstext. getBorder()).getLineColor()==red &(custAddresstext.getText().equals("")==false) ){
    custAddresstext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custAddresstext. getBorder()).getLineColor()==green  &(custAddresstext.getText().equals("")==true)){
  
  custAddresstext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(custAddresstext.getText().equals("")==false){
                
         custAddresstext.setBorder(BorderFactory. createLineBorder(Color. green));       
    } else{
            
        }     
    }//GEN-LAST:event_custAddresstextKeyReleased

    private void custCitytextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custCitytextKeyReleased
       
        if(((LineBorder)custCitytext. getBorder()).getLineColor()==red &(custCitytext.getText().equals("")==false) ){
    custCitytext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custCitytext. getBorder()).getLineColor()==green  &(custCitytext.getText().equals("")==true)){
  
  custCitytext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(custCitytext.getText().equals("")==false){
         custCitytext.setBorder(BorderFactory. createLineBorder(Color. green));       
                
    } else{
        
        }     
    }//GEN-LAST:event_custCitytextKeyReleased

    private void custProvincetextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custProvincetextKeyReleased
      
        if(((LineBorder)custProvincetext. getBorder()).getLineColor()==red &(custProvincetext.getText().equals("")==false) ){
    custProvincetext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custProvincetext. getBorder()).getLineColor()==green  &(custProvincetext.getText().equals("")==true)){
  
  custProvincetext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(custProvincetext.getText().equals("")==false){
       custProvincetext.setBorder(BorderFactory. createLineBorder(Color. green));           
                
    }else{
            
        }        
        
        
    }//GEN-LAST:event_custProvincetextKeyReleased

    private void custPostaltextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custPostaltextKeyReleased
          if(((LineBorder)custPostaltext. getBorder()).getLineColor()==red &(custPostaltext.getText().equals("")==false) ){
    custPostaltext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custPostaltext. getBorder()).getLineColor()==green  &(custPostaltext.getText().equals("")==true)){
  
  custPostaltext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(custPostaltext.getText().equals("")==false){
         custPostaltext.setBorder(BorderFactory. createLineBorder(Color. green));        
                
    } else{
            
        }      
    }//GEN-LAST:event_custPostaltextKeyReleased

    private void custDOBtextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_custDOBtextKeyReleased
        if(((LineBorder)custDOBtext. getBorder()).getLineColor()==red &(custDOBtext.getText().equals("")==false) ){
    custDOBtext.setBorder(BorderFactory. createLineBorder(Color. green)); 
    
}else if(((LineBorder)custDOBtext. getBorder()).getLineColor()==green  &(custDOBtext.getText().equals("")==true)){
  
   custDOBtext.setBorder(BorderFactory. createLineBorder(Color. red)); 
        }else if(custDOBtext.getText().equals("")==false){
                
        custDOBtext.setBorder(BorderFactory. createLineBorder(Color. green));        
    }  else{
            
        }    
    }//GEN-LAST:event_custDOBtextKeyReleased
        


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustButton;
    private javax.swing.JPanel basepanel;
    private javax.swing.JComboBox<String> comboxtitle;
    private javax.swing.JTextField custAddresstext;
    private javax.swing.JTextField custCitytext;
    private javax.swing.JTextField custDOBtext;
    private javax.swing.JTextField custIdtext;
    private javax.swing.JTextField custNametext;
    private javax.swing.JTextField custPostaltext;
    private javax.swing.JTextField custProvincetext;
    private javax.swing.JTextField custSalarytext;
    private javax.swing.JLabel customerAddressLabel;
    private javax.swing.JLabel customerCityLabel;
    private javax.swing.JLabel customerDOBLabel1;
    private javax.swing.JLabel customerIdLabel;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JLabel customerPostalLabel;
    private javax.swing.JLabel customerProvinceLabel;
    private javax.swing.JLabel customerSalaryLabel;
    private javax.swing.JTable customerTable;
    private javax.swing.JLabel customerTitleLabel;
    private javax.swing.JButton deleteCustButton;
    private javax.swing.JLabel headerlabel;
    private javax.swing.JPanel headerpanel;
    private javax.swing.JPanel homepanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel tablepanel;
    private javax.swing.JButton updateCustButton;
    // End of variables declaration//GEN-END:variables

    private void addCustomer()  {

       try {
           CustomerDto customerDto = new CustomerDto(custIdtext.getText(),comboxtitle.getSelectedItem().toString(), custNametext.getText(), custDOBtext.getText(), Double.parseDouble(custSalarytext.getText()), custAddresstext.getText(), custCitytext.getText(), custProvincetext.getText(), custPostaltext.getText());
           
           String result=customerController.addCustomer(customerDto);
           JOptionPane.showMessageDialog(this, result);
           
           loadAllCustomers();
           clear();
           
       } catch (Exception ex) {
           Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
       }
    
   
   }

private void clear(){
    custIdtext.setText("");
    comboxtitle.setSelectedIndex(0);
    custNametext.setText("");
    custDOBtext.setText("");
    custSalarytext.setText("");
    custAddresstext.setText("");
    custCitytext.setText("");
    custProvincetext.setText("");
    custPostaltext.setText("");
    
    
    custIdtext.setBorder(BorderFactory.createLineBorder(lightGray));
    
    custNametext.setBorder(BorderFactory.createLineBorder(lightGray));
     custDOBtext.setBorder(BorderFactory.createLineBorder(lightGray));
    custSalarytext.setBorder(BorderFactory.createLineBorder(lightGray));
      custAddresstext.setBorder(BorderFactory.createLineBorder(lightGray));       
      custCitytext.setBorder(BorderFactory.createLineBorder(lightGray));       
      custProvincetext.setBorder(BorderFactory.createLineBorder(lightGray));      
       custPostaltext.setBorder(BorderFactory.createLineBorder(lightGray));     
            
    
    
    
    
    
}

    private void loadAllCustomers() {
            try {
            String[] Columns={"Id","Name","Address","Salary","Postal code"};
            DefaultTableModel dtm=new DefaultTableModel(Columns,0){
                
                public boolean isCellEditable(int row,int column){
                    return false;
                }
                
            };
            
            customerTable.setModel(dtm);
            
            ArrayList<CustomerDto> customers=customerController.getAllCustomers();
            
            for(CustomerDto customer :customers){
                Object[] rowData={customer.getId(),customer.getTitle()+" "+customer.getName(),customer.getAddress()+", "+customer.getCity(),customer.getSalary(),customer.getZip()};
                dtm.addRow(rowData);
            }  } catch (Exception ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }  
    
    }

    private void searchCustomer() {
        
        try {
            String custId=customerTable.getValueAt(customerTable.getSelectedRow(), 0).toString();
            CustomerDto customerDto=customerController.getCustomer(custId);
            
            if(customerDto!=null){
                
               custIdtext.setText(customerDto.getId());
    comboxtitle.setSelectedItem(customerDto.getTitle());
    custNametext.setText(customerDto.getName());
    custDOBtext.setText(customerDto.getDob());
    custSalarytext.setText(Double.toString(customerDto.getSalary()));
    custAddresstext.setText(customerDto.getAddress());
    custCitytext.setText(customerDto.getCity());
    custProvincetext.setText(customerDto.getProvince());
    custPostaltext.setText(customerDto.getZip());  
                
                
                }else{
                
                JOptionPane.showMessageDialog(this,"Customer Not Found");
                
                
            }
        } catch (Exception ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    
    }

    private void updateCustomer() {
       
        try {
            CustomerDto customer=new CustomerDto(custIdtext.getText(),
                    comboxtitle.getSelectedItem().toString(),
                    custNametext.getText(),
                    custDOBtext.getText(),
                    Double.parseDouble(custSalarytext.getText()),
                    custAddresstext.getText(),
                    custCitytext.getText(),
                    custProvincetext.getText(),
                    custPostaltext.getText());
           String resp= customerController.updateCustomer(customer);
           
            JOptionPane.showMessageDialog(this, resp);
             loadAllCustomers();
            
            clear();
           
           
        } catch (Exception ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void deleteCustomer() {
         
       try {
            String custId=custIdtext.getText();
            String resp= customerController.deleteCustomer(custId);
            
            JOptionPane.showMessageDialog(this, resp);
            clear();
            loadAllCustomers();
        } catch (Exception ex) {
            Logger.getLogger(CustomerPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    
    
}   
        
    



    private void formValidate() {
       
        String id=custIdtext.getText();
        // String title=custTitletext.getText();
        String title= comboxtitle.getSelectedItem().toString();
          String name=custNametext.getText();
          String dob=custDOBtext.getText();
          String salary=custSalarytext.getText();
             String address=custAddresstext.getText();
              String city= custCitytext.getText();
                  String province= custProvincetext.getText();
                String zip=custPostaltext.getText();  
                
                if(id.equals("")){
                   JOptionPane.showMessageDialog(this, "Please enter Customer Id");
                  custIdtext.setBorder(BorderFactory. createLineBorder(Color. red));
                   
                  
                                      
                }else if(title.equals("")){
                   
                   JOptionPane.showMessageDialog(this, "Please enter Customer Title");
                   
                   
                }else if(name.equals("")){
                    
                     
                   JOptionPane.showMessageDialog(this, "Please enter Customer Name");
                   custNametext.setBorder(BorderFactory. createLineBorder(Color. red));
                }
        else if(dob.equals("")){
                   
            JOptionPane.showMessageDialog(this, "Please enter Customer's Date Of Birth");
             custDOBtext.setBorder(BorderFactory. createLineBorder(Color. red));      
               }
                else if(salary.equals("")){
                    
                  JOptionPane.showMessageDialog(this, "Please enter Customer Salary");
                custSalarytext .setBorder(BorderFactory. createLineBorder(Color. red));   
               
               
               }else if(address.equals("")){
                    
                   JOptionPane.showMessageDialog(this, "Please enter Customer Address");
                   custAddresstext.setBorder(BorderFactory. createLineBorder(Color. red));
                   
                }else if(city.equals("")){
                   
                    JOptionPane.showMessageDialog(this, "Please enter Customer City");
                  custCitytext.setBorder(BorderFactory. createLineBorder(Color. red));
                    
                }else if(province.equals("")){
                 
                    JOptionPane.showMessageDialog(this, "Please enter Customer Province");
                  custProvincetext.setBorder(BorderFactory. createLineBorder(Color. red));
                     
                }else if(zip.equals("")){
                   
                    JOptionPane.showMessageDialog(this, "Please enter Customer Postal Code");
                    custPostaltext.setBorder(BorderFactory. createLineBorder(Color. red));
                   
                   
                }else if((isDouble(salary))==false){
                  
                    JOptionPane.showMessageDialog(this, "Please enter Valid Customer Salary");  
                   custSalarytext.setBorder(BorderFactory. createLineBorder(Color. red)); 
                
                }else{
                   
                    addCustomer();
                }
        
        
        
        
        
        
        
        
    }
     
    
    boolean isDouble(String input) {
        try {
            Double.parseDouble(input);
            
            return true;
        } catch (NumberFormatException e) {
            
            return false;
        }
    
    
    
    }
}




